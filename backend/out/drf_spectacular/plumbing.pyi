from abc import ABCMeta
from drf_spectacular.drainage import error as error, warn as warn
from drf_spectacular.settings import spectacular_settings as spectacular_settings
from drf_spectacular.types import DJANGO_PATH_CONVERTER_MAPPING as DJANGO_PATH_CONVERTER_MAPPING, OPENAPI_TYPE_MAPPING as OPENAPI_TYPE_MAPPING, OpenApiTypes as OpenApiTypes, PYTHON_TYPE_MAPPING as PYTHON_TYPE_MAPPING
from drf_spectacular.utils import OpenApiParameter as OpenApiParameter
from typing import Any, Optional, Type, TypeVar, Union

class Choices: ...
T = TypeVar('T')

class UnableToProceedError(Exception): ...

def anyisinstance(obj: Any, type_list: Any): ...
def get_class(obj: Any) -> type: ...
def force_instance(serializer_or_field: Any): ...
def is_serializer(obj: Any) -> bool: ...
def is_field(obj: Any): ...
def is_basic_type(obj: Any, allow_none: bool = ...): ...
def get_lib_doc_excludes(): ...
def get_view_model(view: Any): ...
def get_doc(obj: Any): ...
def build_basic_type(obj: Any): ...
def build_array_type(schema: Any, min_length: Optional[Any] = ..., max_length: Optional[Any] = ...): ...
def build_object_type(properties: Optional[Any] = ..., required: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any): ...
def build_parameter_type(name: Any, schema: Any, location: Any, required: bool = ..., description: Optional[Any] = ..., enum: Optional[Any] = ..., deprecated: bool = ..., explode: Optional[Any] = ..., style: Optional[Any] = ...): ...
def build_choice_field(field: Any): ...
def build_root_object(paths: Any, components: Any): ...
def safe_ref(schema: Any): ...
def append_meta(schema: Any, meta: Any): ...
def follow_field_source(model: Any, path: Any): ...
def alpha_operation_sorter(endpoint: Any): ...

class ResolvedComponent:
    SCHEMA: str = ...
    SECURITY_SCHEMA: str = ...
    name: Any = ...
    type: Any = ...
    schema: Any = ...
    object: Any = ...
    def __init__(self, name: Any, type: Any, schema: Optional[Any] = ..., object: Optional[Any] = ...) -> None: ...
    def __bool__(self): ...
    @property
    def key(self): ...
    @property
    def ref(self) -> dict: ...

class ComponentRegistry:
    def __init__(self) -> None: ...
    def register(self, component: ResolvedComponent) -> Any: ...
    def register_on_missing(self, component: ResolvedComponent) -> Any: ...
    def __contains__(self, component: Any): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def build(self, extra_components: Any) -> dict: ...

class OpenApiGeneratorExtension(metaclass=ABCMeta):
    target_class: Union[None, str, Type[object]] = ...
    match_subclasses: bool = ...
    priority: int = ...
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    target: Any = ...
    def __init__(self, target: Any) -> None: ...
    @classmethod
    def get_match(cls: Any, target: Any) -> Optional[T]: ...

def deep_import_string(string: Any): ...
def load_enum_name_overrides(): ...
def list_hash(lst: Any): ...
def resolve_regex_path_parameter(path_regex: Any, variable: Any, available_formats: Any): ...
def is_versioning_supported(versioning_class: Any): ...
def operation_matches_version(view: Any, requested_version: Any): ...
def modify_for_versioning(patterns: Any, method: Any, path: Any, view: Any, requested_version: Any): ...
def detype_pattern(pattern: Any): ...
def normalize_result_object(result: Any): ...
def sanitize_result_object(result: Any): ...
def camelize_operation(path: Any, operation: Any): ...
def build_mock_request(method: Any, path: Any, view: Any, original_request: Any, **kwargs: Any): ...
def set_query_parameters(url: Any, **kwargs: Any) -> str: ...
def get_relative_url(url: str) -> str: ...
def resolve_type_hint(hint: Any): ...
