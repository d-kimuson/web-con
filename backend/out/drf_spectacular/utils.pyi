from drf_spectacular.drainage import error as error, get_view_methods as get_view_methods, set_override as set_override, warn as warn
from rest_framework.serializers import Serializer
from typing import Any, Dict, List, Optional, Type, Union

SerializerType = Union[Serializer, Type[Serializer]]

class PolymorphicProxySerializer:
    component_name: Any = ...
    serializers: Any = ...
    resource_type_field_name: Any = ...
    def __init__(self, component_name: str, serializers: Union[List[SerializerType], Dict[str, SerializerType]], resource_type_field_name: str) -> None: ...

class OpenApiSchemaBase: ...

class OpenApiParameter(OpenApiSchemaBase):
    QUERY: str = ...
    PATH: str = ...
    HEADER: str = ...
    COOKIE: str = ...
    name: Any = ...
    type: Any = ...
    location: Any = ...
    required: Any = ...
    description: Any = ...
    enum: Any = ...
    deprecated: Any = ...
    def __init__(self, name: Any, type: Any = ..., location: Any = ..., required: bool = ..., description: str = ..., enum: Optional[Any] = ..., deprecated: bool = ...) -> None: ...

def extend_schema(operation_id: Optional[Any] = ..., parameters: Optional[Any] = ..., request: Any = ..., responses: Any = ..., auth: Optional[Any] = ..., description: Optional[Any] = ..., summary: Optional[Any] = ..., deprecated: Optional[Any] = ..., tags: Optional[Any] = ..., exclude: bool = ..., operation: Optional[Any] = ..., methods: Optional[Any] = ..., versions: Optional[Any] = ...): ...
def extend_schema_field(field: Any): ...
def extend_schema_serializer(many: Optional[Any] = ..., exclude_fields: Optional[Any] = ...): ...
def extend_schema_view(**kwargs: Any): ...
def inline_serializer(name: str, fields: Dict[str, object], **kwargs: Any) -> SerializerType: ...
