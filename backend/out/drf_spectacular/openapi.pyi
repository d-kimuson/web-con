from drf_spectacular.contrib import *
import typing
from drf_spectacular.authentication import OpenApiAuthenticationExtension as OpenApiAuthenticationExtension
from drf_spectacular.drainage import get_override as get_override, has_override as has_override
from drf_spectacular.extensions import OpenApiSerializerExtension as OpenApiSerializerExtension, OpenApiSerializerFieldExtension as OpenApiSerializerFieldExtension
from drf_spectacular.plumbing import ComponentRegistry as ComponentRegistry, ResolvedComponent as ResolvedComponent, UnableToProceedError as UnableToProceedError, anyisinstance as anyisinstance, append_meta as append_meta, build_array_type as build_array_type, build_basic_type as build_basic_type, build_choice_field as build_choice_field, build_object_type as build_object_type, build_parameter_type as build_parameter_type, error as error, follow_field_source as follow_field_source, force_instance as force_instance, get_doc as get_doc, get_view_model as get_view_model, is_basic_type as is_basic_type, is_field as is_field, is_serializer as is_serializer, resolve_regex_path_parameter as resolve_regex_path_parameter, resolve_type_hint as resolve_type_hint, safe_ref as safe_ref, warn as warn
from drf_spectacular.settings import spectacular_settings as spectacular_settings
from drf_spectacular.types import OpenApiTypes as OpenApiTypes
from drf_spectacular.utils import OpenApiParameter as OpenApiParameter
from rest_framework.schemas.inspectors import ViewInspector
from typing import Any

class AutoSchema(ViewInspector):
    method_mapping: Any = ...
    registry: Any = ...
    path: Any = ...
    path_regex: Any = ...
    method: Any = ...
    def get_operation(self, path: Any, path_regex: Any, method: Any, registry: ComponentRegistry) -> Any: ...
    def get_override_parameters(self): ...
    def get_description(self): ...
    def get_summary(self) -> None: ...
    def get_auth(self): ...
    def get_request_serializer(self): ...
    def get_response_serializers(self): ...
    def get_tags(self) -> typing.List[str]: ...
    def get_operation_id(self): ...
    def is_deprecated(self): ...
    def map_parsers(self): ...
    def map_renderers(self, attribute: Any): ...
    def resolve_serializer(self, serializer: Any, direction: Any) -> ResolvedComponent: ...
