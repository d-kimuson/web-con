from . import app_settings as app_settings, providers as providers
from ..utils import get_request_param as get_request_param
from .adapter import get_adapter as get_adapter
from .fields import JSONField as JSONField
from allauth.account.models import EmailAddress as EmailAddress
from allauth.account.utils import get_next_redirect_url as get_next_redirect_url, setup_user_email as setup_user_email
from allauth.utils import get_user_model as get_user_model
from django.db import models
from typing import Any, Optional

class SocialAppManager(models.Manager):
    def get_current(self, provider: Any, request: Optional[Any] = ...): ...

class SocialApp(models.Model):
    objects: Any = ...
    provider: Any = ...
    name: Any = ...
    client_id: Any = ...
    secret: Any = ...
    key: Any = ...
    sites: Any = ...
    certificate: Any = ...
    class Meta:
        verbose_name: Any = ...
        verbose_name_plural: Any = ...

class SocialAccount(models.Model):
    user: Any = ...
    provider: Any = ...
    uid: Any = ...
    last_login: Any = ...
    date_joined: Any = ...
    extra_data: Any = ...
    class Meta:
        unique_together: Any = ...
        verbose_name: Any = ...
        verbose_name_plural: Any = ...
    def authenticate(self): ...
    def get_profile_url(self): ...
    def get_avatar_url(self): ...
    def get_provider(self): ...
    def get_provider_account(self): ...

class SocialToken(models.Model):
    app: Any = ...
    account: Any = ...
    token: Any = ...
    token_secret: Any = ...
    expires_at: Any = ...
    class Meta:
        unique_together: Any = ...
        verbose_name: Any = ...
        verbose_name_plural: Any = ...

class SocialLogin:
    token: Any = ...
    user: Any = ...
    account: Any = ...
    email_addresses: Any = ...
    state: Any = ...
    def __init__(self, user: Optional[Any] = ..., account: Optional[Any] = ..., token: Optional[Any] = ..., email_addresses: Any = ...) -> None: ...
    def connect(self, request: Any, user: Any) -> None: ...
    def serialize(self): ...
    @classmethod
    def deserialize(cls, data: Any): ...
    def save(self, request: Any, connect: bool = ...) -> None: ...
    @property
    def is_existing(self): ...
    def lookup(self) -> None: ...
    def get_redirect_url(self, request: Any): ...
    @classmethod
    def state_from_request(cls, request: Any): ...
    @classmethod
    def stash_state(cls, request: Any): ...
    @classmethod
    def unstash_state(cls, request: Any): ...
    @classmethod
    def verify_and_unstash_state(cls, request: Any, verifier: Any): ...
